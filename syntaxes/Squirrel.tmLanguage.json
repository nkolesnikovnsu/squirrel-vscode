{
  "comment": "Squirrel Syntax",
  "fileTypes": [
    ".nut"
  ],
  "foldingStartMarker": "/\\*\\*|\\{\\s*$",
  "foldingStopMarker": "\\*\\*/|^\\s*\\}",
  "keyEquivalent": "^~S",
  "name": "Squirrel",
  "patterns": [
    {
      "captures": {
        "1": {
          "name": "storage.type.class.squirrel"
        },
        "2": {
          "name": "entity.name.type.class.squirrel"
        },
        "3": {
          "name": "storage.modifier.extends.squirrel"
        },
        "4": {
          "name": "entity.other.inherited-class.squirrel"
        }
      },
      "match": "\\b(class)\\s+([a-zA-Z_](?:\\w|\\.)*)(?:\\s+(extends)\\s+([a-zA-Z_](?:\\w|\\.)*))?",
      "name": "meta.class.squirrel"
    },
    {
      "captures": {
        "1": {
          "name": "keyword.control.squirrel"
        },
        "2": {
          "name": "entity.name.function"
        },
        "3": {
          "name": "variable.parameter"
        }
      },
      "match": "^\\s*(function)\\s*([a-zA-Z0-9_]*)\\s*\\(([a-zA-Z0-9_]*(,\\s*[a-zA-Z0-9_]+)*)\\)",
      "name": "other.function"
    },
    {
      "captures": {
        "1": {
          "name": "entity.name.function"
        },
        "2": {
          "name": "variable.parameter"
        }
      },
      "match": "^\\s*(constructor)\\s*\\((.*)\\)",
      "name": "other.constructor"
    },
    {
      "captures": {
        "1": {
          "name": "support.function"
        }
      },
      "match": "^\\s*(::[a-zA-Z0-9_]*)",
      "name": "other.global"
    },
    {
      "match": "\\b(if|else|while|do|switch|case|break|for|foreach|return|throw|yield|continue|catch|resume|default)\\b",
      "name": "keyword.control.squirrel"
    },
    {
      "match": "\\b(local|class|function|enum)\\b",
      "name": "storage.type.squirrel"
    },
    {
      "match": "\\b(extends|static|const)\\b",
      "name": "storage.modifier.squirrel"
    },
    {
      "match": "\\b(delete|in|clone|instanceof|typeof)\\b",
      "name": "keyword.operator.squirrel"
    },
    {
      "match": "\\btrue\\b",
      "name": "constant.language.boolean.true.squirrel"
    },
    {
      "match": "\\bfalse\\b",
      "name": "constant.language.boolean.false.squirrel"
    },
    {
      "match": "\\bnull\\b",
      "name": "constant.language.null.squirrel"
    },
    {
      "match": "\\b(base|this)\\b",
      "name": "variable.language.squirrel"
    },
    {
      "match": "!|%|&|\\*|\\-\\-|\\-|\\+\\+|\\+|==|=|!=|<=|>=|<=>|<-|>>>|<<|>>|!|&&|\\|\\||\\?\\:|\\*=|(?<!\\()/=|%=|\\+=|\\-=|&=|%=|\\b(in|instanceof|typeof)\\b",
      "name": "keyword.operator.squirrel"
    },
    {
      "match": "\\b(math.abs|math.acos|math.asin|math.atan|math.atan2|math.ceil|math.cos|math.exp|math.fabs|math.floor|math.log|math.log10|math.pow|math.rand|math.sin|math.sqrt|math.tan)\\b",
      "name": "variable.language.squirrel.standard.math"
    },
    {
      "match": "\\b(format|strip|lstrip|rstrip|split)\\b",
      "name": "variable.language.squirrel.string"
    },
    {
      "match": "\\b(array|blob|math|regexp|regexp2)\\b",
      "name": "variable.language.squirrel.standard"
    },
    {
      "match": "\\b(callee|collectgarbage|type)\\b",
      "name": "variable.language.squirrel.standard.base"
    },
    {
      "match": "\\b(assert|castf2i|casti2f|date|getroottable|swap2|swap4|swapfloat|time)\\b",
      "name": "variable.language.squirrel.system"
    },
    {
      "match": "\\b(agent.on|agent.send)\\b",
      "name": "variable.language.electricimp.agent"
    },
    {
      "match": "\\b(crypto.equals|crypto.hmacsha256|crypto.sha256|crypto.sign|crypto.verify)\\b",
      "name": "variable.language.electricimp.crypto"
    },
    {
      "match": "\\b(crypto.RSASSA_PKCS1_SHA256)\\b",
      "name": "constant.language.electricimp.crypto"
    },
    {
      "match": "\\b(device.send|device.on|device.onconnect|device.ondisconnect|device.isconnected|device.info)\\b",
      "name": "variable.language.electricimp.device"
    },
    {
      "match": "\\b(ftp.get|ftp.put)\\b",
      "name": "variable.language.electricimp.ftp"
    },
    {
      "match": "\\b(hardware.getdeviceid|hardware.lightlevel|hardware.micros|hardware.millis|hardware.vbat|hardware.voltage|hardware.wakereason)\\b",
      "name": "variable.language.electricimp.hardware"
    },
    {
      "match": "\\b(bluetooth.address|bluetooth.close|bluetooth.getsecuritycode|bluetooth.onconnect|bluetooth.open|bluetooth.servegatt|bluetooth.setscanfilter|bluetooth.setscanparams|bluetooth.setsecurity|bluetooth.settxpower|bluetooth.startadvertise|bluetooth.startscan|bluetooth.stopadvertise|bluetooth.stopscan|bluetooth.uartflags)\\b",
      "name": "variable.language.electricimp.bluetooth"
    },
    {
      "match": "\\b(fixedfrequencydac.addbuffer|fixedfrequencydac.configure|fixedfrequencydac.start|fixedfrequencydac.stop)\\b",
      "name": "variable.language.electricimp.fixedfrequencydac"
    },
    {
      "match": "\\b(i2c.configure|i2c.disable|i2c.read|i2c.readerror|i2c.write)\\b",
      "name": "variable.language.electricimp.i2c"
    },
    {
      "match": "\\b(pin.configure|pin.getdelay|pin.getdutycycle|pin.getperiod|pin.getsteps|pin.read|pin.write)\\b",
      "name": "variable.language.electricimp.pin"
    },
    {
      "match": "\\b(sampler.configure|sampler.getsampleratehz|sampler.reset|sampler.start|sampler.stop)\\b",
      "name": "variable.language.electricimp.sampler"
    },
    {
      "match": "\\b(dfsdm.configure|dfsdm.getsampleratehz|dfsdm.reset|dfsdm.start|dfsdm.stop)\\b",
      "name": "variable.language.electricimp.dfsdm"
    },
    {
      "match": "\\b(spi.chipselect|spi.configure|spi.disable|spi.readblob|spi.readstring|spi.write|spi.writeread)\\b",
      "name": "variable.language.electricimp.spi"
    },
    {
      "match": "\\b(spiflash.chipid|spiflash.disable|spiflash.enable|spiflash.erasesector|spiflash.info|spiflash.read|spiflash.readintoblob|spiflash.setspeed|spiflash.size|spiflash.write)\\b",
      "name": "variable.language.electricimp.spiflash"
    },
    {
      "match": "\\b(uart.configure|uart.disable|uart.flags|uart.flush|uart.read|uart.readblob|uart.readstring|uart.setrxfifosize|uart.settxactive|uart.settxfifosize|uart.write)\\b",
      "name": "variable.language.electricimp.uart"
    },
    {
      "match": "\\b(usb.configure|usb.controltransfer|usb.disable|usb.generaltransfer|usb.openendpoint)\\b",
      "name": "variable.language.electricimp.usb"
    },
    {
      "match": "\\b(usb.MAX_TRANSFER)\\b",
      "name": "constant.language.electricimp.usb"
    },
    {
      "match": "\\b(http.hash.hmacsha256|http.hash.hmacsha512|http.hash.md5|http.hash.sha1|http.hash.sha256|http.hash.sha512|http.hash.hmacsha1)\\b",
      "name": "variable.language.electricimp.http.hash"
    },
    {
      "match": "\\b(http.agenturl|http.base64decode|http.base64encode|http.get|http.delete|http.jsondecode|http.jsonencode|http.onrequest|http.post|http.poststream|http.put|http.putstream|http.request|http.requeststream|http.urldecode|http.urlencode|http.hash)\\b",
      "name": "variable.language.electricimp.http"
    },
    {
      "match": "\\b(imp.net.configurewps|imp.net.counters|imp.net.getwifihints|imp.net.info|imp.net.setwifihints)\\b",
      "name": "variable.language.electricimp.imp.net"
    },
    {
      "match": "\\b(imp.sleep|imp.deepsleepfor|imp.deepsleepuntil|imp.wakeup|imp.onidle|imp.setpowersave|imp.getpowersave|imp.clearconfiguration|imp.setwificonfiguration|imp.setenroltokens|imp.getcountry|imp.getmemoryfree|imp.enableblinkup|imp.environment|imp.getsoftwareversion|imp.getbootromversion|imp.cancelwakeup|imp.setsendbuffersize|imp.scanwifinetworks|imp.setproxy|imp.setstaticnetworkconfiguration|imp.setpoweren|imp.getpoweren|imp.setcountry|imp.setnvramimage|imp.setrescuepin|imp.info|imp.getuserconfiguration|imp.setuserconfiguration|imp.onunhandledexception|imp.reset)\\b",
      "name": "variable.language.electricimp.imp"
    },
    {
      "match": "\\b(mqtt.createclient)\\b",
      "name": "variable.language.electricimp.mqtt"
    },
    {
      "match": "\\b(mqtt.AT_MOST_ONCE|mqtt.AT_LEAST_ONCE|mqtt.EXACTLY_ONCE)\\b",
      "name": "constant.language.electricimp.mqtt"
    },
    {
      "match": "\\b(server.bless|server.connect|server.disconnect|server.error|server.factoryblinkup|server.flush|server.isconnected|server.load|server.log|server.onshutdown|server.onunexpecteddisconnect|server.restart|server.save|server.setsendtimeoutpolicy|server.sleepfor|server.sleepuntil)\\b",
      "name": "variable.language.electricimp.server"
    },
    {
      "match": "\\b(http|ftp|mqtt|server|imp|math|device|crypto|nv)\\b",
      "name": "variable.language.electricimp.vimp"
    },
    {
      "match": "\\b(RAND_MAX|PI|SHUTDOWN_NEWSQUIRREL|SHUTDOWN_NEWFIRMWARE|SHUTDOWN_OTHER|HTTP_PAUSE|NO_TIMEOUT|VALIDATE_NONE|VALIDATE_USING_SYSTEM_CA_CERTS|DIGITAL_IN|DIGITAL_IN_PULLUP|DIGITAL_IN_PULLDOWN|DIGITAL_IN_WAKEUP|DIGITAL_OUT|DIGITAL_OUT_OD|DIGITAL_OUT_OD_PULLUP|ANALOG_IN|ANALOG_OUT|PWM_OUT|PWM_OUT_STEPS|PULSE_COUNTER|PTPG_OUT_ACTIVE_HIGH|PTPG_OUT_ACTIVE_LOW|SPI_257|SPI_189|UART_1289|UART_57|UART_12|I2C_12|I2C_89|UART2_1289|I2C2_12|UART1_57|I2C1_89|SIMPLEX_TX|SIMPLEX_RX|CLOCK_IDLE_HIGH|CLOCK_IDLE_LOW|CLOCK_2ND_EDGE|LSB_FIRST|MSB_FIRST|NO_SCLK|NO_TX|NO_RX|NO_CTSRTS|CALLBACK_WITH_FLAGS|PARITY_NONE|PARITY_EVEN|PARITY_ODD|TIMING_ENABLED|CLOCK_SPEED_10_KHZ|CLOCK_SPEED_50_KHZ|CLOCK_SPEED_100_KHZ|CLOCK_SPEED_400_KHZ|NORMALISE|A_LAW_COMPRESS|DFSDM_PACK_AUDIO|A_LAW_DECOMPRESS|AUDIO|SYNC|ENVIRONMENT_CARD|ENVIRONMENT_MODULE|ENVIRONMENT_AGENT|WAKEREASON_POWER_ON|WAKEREASON_TIMER|WAKEREASON_SW_RESET|WAKEREASON_PIN1|WAKEREASON_PIN|WAKEREASON_NEW_SQUIRREL|WAKEREASON_SQUIRREL_ERROR|WAKEREASON_NEW_FIRMWARE|WAKEREASON_SNOOZE|WAKEREASON_HW_RESET|WAKEREASON_BLINKUP|WAKEREASON_SW_RESTART|WAKEREASON_POWER_RESTORED|SHUTDOWN_NEWSQUIRREL|SHUTDOWN_NEWFIRMWARE|SHUTDOWN_OTHER|WAIT_TIL_SENT|WAIT_FOR_ACK|SUSPEND_ON_ERROR|RETURN_ON_ERROR|RETURN_ON_ERROR_NO_DISCONNECT|BLINKUP_FAST|BLINKUP_ACTIVEHIGH|SERVER_CONNECTED|NO_WIFI|NO_LINK|NO_IP_ADDRESS|NO_SERVER|NOT_RESOLVED|NOT_CONNECTED|NO_PROXY|NOT_AUTHORISED|SEND_ERROR_NOT_CONNECTED|SEND_ERROR_TIMEOUT|SEND_ERROR_DISCONNECTED|SEND_ERROR_WOULDBLOCK|SUNDAY|MONDAY|TUESDAY|WEDNESDAY|THURSDAY|FRIDAY|SATURDAY|WRITE_DONE|READ_READY|NOISE_ERROR|FRAME_ERROR|PARITY_ERROR|OVERRUN_ERROR|LINE_IDLE|WRITE_HALF_DONE|SPIFLASH_POSTVERIFY|SPIFLASH_PREVERIFY|PROXY_TYPE_HTTP|CONFIG_ALL|CONFIG_STATIC_NETWORK|CONFIG_PROXY|CONFIG_WIFI|USB_DEVICE_CONNECTED|USB_DEVICE_DISCONNECTED|USB_TRANSFER_COMPLETED|USB_UNRECOVERABLE_ERROR)\\b",
      "name": "constant.language.electricimp"
    },
    {
      "match": "\\;",
      "name": "punctuation.terminator.statement.squirrel"
    },
    {
      "match": "\\b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\\.[0-9]+)?))\\b",
      "name": "constant.numeric.squirrel"
    },
    {
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.squirrel"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.squirrel"
        }
      },
      "name": "string.quoted.single.squirrel"
    },
    {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.squirrel"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.squirrel"
        }
      },
      "name": "string.quoted.double.squirrel"
    },
    {
      "begin": "/\\*\\*(?!/)",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "end": "\\*/",
      "name": "comment.block.documentation.squirrel"
    },
    {
      "begin": "/\\*",
      "captures": {
        "0": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "end": "\\*/",
      "name": "comment.block.squirrel"
    },
    {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.squirrel"
        }
      },
      "match": "(//).*$\\n?",
      "name": "comment.line.double-slash.squirrel"
    },
    {
      "match": "\\{|\\}",
      "name": "meta.brace.curly.squirrel"
    },
    {
      "match": "\\(|\\)",
      "name": "meta.brace.round.squirrel"
    },
    {
      "match": "\\[|\\]",
      "name": "meta.brace.square.squirrel"
    }
  ],
  "scopeName": "source.nut",
  "uuid": "ccfe3470-9899-4d26-9f42-9c880131b71c"
}
